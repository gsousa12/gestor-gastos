generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_HOST")
}

model User {
  id         Int        @id @default(autoincrement())
  name       String 
  email      String     @unique
  password   String
  role       String     
  createdAt  DateTime   @map("created_at")
  updatedAt  DateTime?  @map("updated_at")
  deletedAt  DateTime?  @map("deleted_at")
  isActive   Boolean    @map("is_active")

  expenses        Expense[]
}

model Supplier {
  id              Int          @id @default(autoincrement())
  name            String
  companyName     String?      @map("company_name")
  taxId           String?      @map("tax_id")
  recurringDebit   Int          @map("recurring_debit") 
  contactEmail    String?      @map("contact_email") 
  contactPhone    String?      @map("contact_phone") 
  createdAt       DateTime     @map("created_at")
  updatedAt       DateTime?    @map("updated_at")
  deletedAt       DateTime?    @map("deleted_at")

  expenses        Expense[]
  payments        Payment[]
}

model Sector {
  id              Int          @id @default(autoincrement())
  name            String       @unique
  description     String?      
  createdAt       DateTime     @map("created_at")
  updatedAt       DateTime?    @map("updated_at")

  subsectors      SubSector[]  @relation("Subsector")
  payments        Payment[]
}

model SubSector {
  id              Int          @id @default(autoincrement())
  name            String
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime?    @map("updated_at")
  deletedAt       DateTime?    @map("deleted_at")

  sectorId        Int          @map("sector_id")
  sector          Sector       @relation("Subsector", fields: [sectorId], references: [id], onDelete: Cascade)
  expenses        Expense[]
}

model Secretary {
  id              Int          @id @default(autoincrement())
  name            String
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime?    @map("updated_at")
  deletedAt       DateTime?    @map("deleted_at")

  expenses        Expense[]
}

model Expense {
  id              Int          @id @default(autoincrement())
  description     String?
  month           Int
  year            String
  amount          Int
  status          String
  createdAt       DateTime     @map("created_at")
  updatedAt       DateTime?    @map("updated_at")

  supplierId      Int          @map("supplier_id")
  supplier        Supplier     @relation(fields: [supplierId], references: [id])

  secretaryId     Int          @map("secretary_id")
  secretary       Secretary    @relation(fields: [secretaryId], references: [id])

  userId         Int           @map("user_id")
  user           User          @relation(fields: [userId], references: [id])

  subsectorId    Int           @map("subsector_id")
  subsector      SubSector     @relation(fields: [subsectorId], references: [id])

  payments        Payment[]

  expenseItems    ExpenseItem[]
}

model Item {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  ci          Int?       @map("ci") 
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime?  @map("updated_at")
  deletedAt   DateTime?  @map("deleted_at")

  expenseItems ExpenseItem[]
}

model ExpenseItem {
  id            Int      @id @default(autoincrement())
  expenseId     Int      @map("expense_id")
  itemId        Int      @map("item_id")
  quantity      Decimal  @map("quantity") 
  unitOfMeasure String   @map("unit_of_measure") @default("unidade") 
  unitValue     Int?     @map("unit_value") // <-- MUDANÇA: Torna o campo opcional/anulável
  totalValue    Int      @map("total_value") @default(0)

  expense       Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  item          Item     @relation(fields: [itemId], references: [id])
}

model Payment {
  id              Int          @id @default(autoincrement())
  month           Int
  year            String
  status          String
  amount          Int
  recurringDebitDeducted Int?   @map("recurring_debit_deducted")
  recurringDebitDeductedType String? @map("recurring_debit_deducted_type")
  createdAt       DateTime     @map("created_at")
  updatedAt       DateTime?    @map("updated_at")
  cancelledAt      DateTime?    @map("cancelled_at")

  supplierId      Int          @map("supplier_id")
  supplier        Supplier     @relation(fields: [supplierId], references: [id])

  sectorId        Int          @map("sector_id")
  sector          Sector       @relation(fields: [sectorId], references: [id])

  expenseId   Int      @map("expense_id")
  expense     Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
}
